        -:    0:Source:D:/Facultate/OOP/CoffeShop-Materials1/list.c
        -:    0:Graph:D:\Facultate\OOP\CoffeShop-Materials1\cmake-build-debug-coverage\CMakeFiles\Lab2_4.dir\list.c.gcno
        -:    0:Data:D:\Facultate\OOP\CoffeShop-Materials1\cmake-build-debug-coverage\CMakeFiles\Lab2_4.dir\list.c.gcda
        -:    0:Runs:1
        -:    1:#include "list.h"
        -:    2:#include <assert.h>
        -:    3:#include <string.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:
function createEmptyList called 33 returned 100% blocks executed 100%
       33:    7:List* createEmptyList(destroyFunction f) {
       33:    8:    List *rez = malloc(sizeof(List));
       33:    9:    rez->capacity = 2;
       33:   10:    rez->elements = malloc(sizeof(ElemType) * rez->capacity);
       33:   11:    rez->length = 0;
       33:   12:    rez->deleteElement = f;
       33:   13:    return rez;
       33:   13-block  0
        -:   14:}
        -:   15:
function destroyList called 6 returned 100% blocks executed 100%
        6:   16:void destroyList(List *list) {
        9:   17:    for (int i = 0; i < sizeOfList(list); i++)
        6:   17-block  0
        9:   17-block  1
call    0 returned 9
branch  1 taken 3
branch  2 taken 6 (fallthrough)
        3:   18:        list -> deleteElement(list->elements[i]);
        3:   18-block  0
call    0 returned 3
        6:   19:    free(list->elements);
        6:   20:    free(list);
        6:   21:}
        -:   22:
function getElement called 47 returned 100% blocks executed 100%
       47:   23:ElemType getElement(List *list, int pos) {
       47:   24:    return list->elements[pos];
       47:   24-block  0
        -:   25:}
        -:   26:
        -:   27:
function sizeOfList called 98 returned 100% blocks executed 100%
       98:   28:int sizeOfList(List *list) {
       98:   29:    return list->length;
       98:   29-block  0
        -:   30:}
        -:   31:
function ensureCapacity called 60 returned 100% blocks executed 100%
       60:   32:void ensureCapacity(List *list) {
       60:   33:    if (list->length < list->capacity)
       60:   33-block  0
branch  0 taken 48 (fallthrough)
branch  1 taken 12
       48:   34:        return;
       48:   34-block  0
       12:   35:    int newCapacity = list->capacity + 2;
       12:   36:    ElemType *newElements = malloc(sizeof(ElemType) * newCapacity);
        -:   37:
       38:   38:    for (int i = 0; i < list->length; i++)
       12:   38-block  0
       38:   38-block  1
branch  0 taken 26
branch  1 taken 12 (fallthrough)
       26:   39:        newElements[i] = list->elements[i];
       26:   39-block  0
        -:   40:
       12:   41:    free(list->elements);
       12:   42:    list->elements = newElements;
       12:   43:    list->capacity = newCapacity;
       12:   43-block  0
        -:   44:}
        -:   45:
function addElementToList called 59 returned 100% blocks executed 100%
       59:   46:void addElementToList(List *list, ElemType element) {
       59:   47:    ensureCapacity(list);
       59:   47-block  0
call    0 returned 59
       59:   48:    list->elements[list->length] = element;
       59:   49:    list->length++;
       59:   50:}
        -:   51:
function deleteElementFromList called 3 returned 100% blocks executed 80%
        3:   52:void deleteElementFromList(List *list, int index) {
       3*:   53:    for (int i = index; i < sizeOfList(list) - 1; i++)
        3:   53-block  0
        3:   53-block  1
call    0 returned 3
branch  1 taken 0
branch  2 taken 3 (fallthrough)
    #####:   54:        list->elements[i] = list->elements[i + 1];
    %%%%%:   54-block  0
        3:   55:    list->length--;
        3:   56:}
        -:   57:
function updateElementFromList called 2 returned 100% blocks executed 100%
        2:   58:void updateElementFromList(List *list, int index, ElemType updatedElement) {
        2:   59:    list->elements[index] = updatedElement;
        2:   60:}
        -:   61:
        -:   62:
function createCopyOfList called 17 returned 100% blocks executed 100%
       17:   63:List* createCopyOfList(List *list, copyFunction f) {
       17:   64:    List* copyList = createEmptyList(list->deleteElement);
       17:   64-block  0
call    0 returned 17
       46:   65:    for (int i = 0; i < sizeOfList(list); i++) {
       46:   65-block  0
call    0 returned 46
branch  1 taken 29
branch  2 taken 17 (fallthrough)
       29:   66:        ElemType current = getElement(list, i);
       29:   66-block  0
call    0 returned 29
       29:   67:        addElementToList(copyList, current);
call    0 returned 29
        -:   68:    }
       17:   69:    return copyList;
       17:   69-block  0
        -:   70:}
        -:   71:
function testCreateList called 1 returned 100% blocks executed 75%
        1:   72:void testCreateList() {
        1:   73:    List * list = createEmptyList((destroyFunction) destroyMaterial);
        1:   73-block  0
call    0 returned 1
       1*:   74:    assert(sizeOfList(list) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   74-block  0
call    3 never executed
        1:   74-block  1
        1:   75:    destroyList(list);
        1:   75-block  0
call    0 returned 1
        1:   76:}
        -:   77:
function testIterateList called 1 returned 100% blocks executed 70%
        1:   78:void testIterateList() {
        1:   79:    List* list = createEmptyList((destroyFunction) destroyMaterial);
        1:   79-block  0
call    0 returned 1
        1:   80:    Material* material = createMaterial("n1", "p1", 20);
call    0 returned 1
        1:   81:    Material* material1 = createMaterial("n2", "p2", 40);
call    0 returned 1
        1:   82:    addElementToList(list, material);
call    0 returned 1
        1:   83:    Material* material2 = getElement(list, 0);
call    0 returned 1
       1*:   84:    assert(material2->quantity == 20);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   84-block  0
call    2 never executed
        1:   84-block  1
        -:   85:
        1:   86:    addElementToList(list, material1);
        1:   86-block  0
call    0 returned 1
        1:   87:    int length = sizeOfList(list);
call    0 returned 1
       1*:   88:    assert(length == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   88-block  0
call    2 never executed
        1:   88-block  1
        1:   89:    updateElementFromList(list, 0, createMaterial("n2", "p2", 40));
        1:   89-block  0
call    0 returned 1
call    1 returned 1
        1:   90:    material2 = getElement(list, 0);
call    0 returned 1
       1*:   91:    assert(material2->quantity == 40);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   91-block  0
call    2 never executed
        1:   91-block  1
        1:   92:    deleteElementFromList(list, 1);
        1:   92-block  0
call    0 returned 1
        1:   93:    length = sizeOfList(list);
call    0 returned 1
       1*:   94:    assert(length == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   94-block  0
call    2 never executed
        1:   94-block  1
        1:   95:    length = sizeOfList(list);
        1:   95-block  0
call    0 returned 1
       1*:   96:    assert(length == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   96-block  0
call    2 never executed
        1:   96-block  1
        1:   97:    Material *elem = getElement(list, 1);
        1:   97-block  0
call    0 returned 1
       1*:   98:    assert(elem->quantity == 40);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   98-block  0
call    2 never executed
        1:   98-block  1
        1:   99:    destroyList(list);
        1:   99-block  0
call    0 returned 1
        -:  100:
        1:  101:}
        -:  102:
function testCopyList called 1 returned 100% blocks executed 78%
        1:  103:void testCopyList() {
        1:  104:    List* list1 = createEmptyList((destroyFunction) destroyMaterial);
        1:  104-block  0
call    0 returned 1
        1:  105:    addElementToList(list1, createMaterial("n1", "p1", 20));
call    0 returned 1
call    1 returned 1
        1:  106:    addElementToList(list1, createMaterial("n2", "p2", 40));
call    0 returned 1
call    1 returned 1
        1:  107:    List* list2 = createCopyOfList(list1, (copyFunction) copyMaterial);
call    0 returned 1
       1*:  108:    assert(sizeOfList(list1) == sizeOfList(list2));
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  108-block  0
call    4 never executed
        1:  108-block  1
        1:  109:    Material *element = getElement(list2, 0);
        1:  109-block  0
call    0 returned 1
       1*:  110:    assert(element->quantity == 20);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  110-block  0
call    2 never executed
        1:  110-block  1
        1:  111:}
        -:  112:
function testListOfLists called 1 returned 100% blocks executed 87%
        1:  113:void testListOfLists() {
        1:  114:    List* list1 = createEmptyList((destroyFunction) destroyList);
        1:  114-block  0
call    0 returned 1
        1:  115:    List* list2 = createEmptyList((destroyFunction) destroyMaterial);
call    0 returned 1
        1:  116:    addElementToList(list2, createMaterial("1","1",1));
call    0 returned 1
call    1 returned 1
        1:  117:    addElementToList(list2, createMaterial("2","2",2));
call    0 returned 1
call    1 returned 1
        1:  118:    addElementToList(list2, createMaterial("3","3",3));
call    0 returned 1
call    1 returned 1
        1:  119:    addElementToList(list1,list2);
call    0 returned 1
       1*:  120:    assert(sizeOfList(list1) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  120-block  0
call    3 never executed
        1:  120-block  1
        1:  121:}
        -:  122:
function testEnsureCapacity called 1 returned 100% blocks executed 80%
        1:  123:void testEnsureCapacity() {
        1:  124:    List *list = createEmptyList((destroyFunction) destroyMaterial);
        1:  124-block  0
call    0 returned 1
        3:  125:    for (int i = 0; i < 2; i++)
        3:  125-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  126:        addElementToList(list, createMaterial("da", "NU", i));
        2:  126-block  0
call    0 returned 2
call    1 returned 2
        1:  127:    ensureCapacity(list);
        1:  127-block  0
call    0 returned 1
       1*:  128:    assert(sizeOfList(list) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  128-block  0
call    3 never executed
        1:  128-block  1
        1:  129:    addElementToList(list, createMaterial("da", "NU", 4));
        1:  129-block  0
call    0 returned 1
call    1 returned 1
       1*:  130:    assert(sizeOfList(list) == 3);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  130-block  0
call    3 never executed
        1:  130-block  1
        1:  131:}
